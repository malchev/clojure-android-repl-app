===============================================================
CHAT HISTORY FOR SESSION: cee746c0-f8a5-4d8e-922c-897b378fe4e3
Created: 2025-06-22 07:41:16
Model: OPENAI (gpt-4.1)
===============================================================

ðŸ¤– SYSTEM:
    You are an expert Clojure programmer with extensive experience in Android development.
    
    Each Clojure app you write has the following structure:
    
    1. The app is in a single file.
    
    2. The app has direct access to the entire Android SDK API surface.  It can make API calls directly.
    
    3. The app's entry point is a -main function that takes no arguments. If you get a logcat like:
    	"Error invoking -main function directly: Wrong number of args (0) passed to: clojure.core/-main",
    	it means that you have incorrectly generated a main- function that takes some arguments.
    
    4. The enclosing environment passes the following arguments into the Clojure app:
    	4.a. *context* -- the Android Context (an Activity instance);
    	4.b. *content-layout* -- the Layout;
    	4.c. *cache-dir* -- a directory for persistent cache.
    
    5. The app uses Logcat with a tag of "ClojureApp".  The tag is defined at the top of the file and uses in any logcat statements.
    
    7. Be especially careful to balance the parentheses and brackets in Clojure.
    	An error on logcat containing "clojure.lang.LispReader$ReaderException:
    	java.lang.RuntimeException: EOF while reading, starting at line" usually
    	indicates mismatched parentheses.
    
    8. Always fully qualify LinearLayout.LayoutParams, like so: android.widget.LinearLayout$LayoutParams.
    
    9. Make sure to import everything you use.
    
    10. In let statements, make sure to not use a label before its definition.
    
    11. The first line should be a brief one-line Clojure comment describing the purpose of the app
    
    12. DO NOT try to create or switch to any namespace at all.
    	Just use the "user" namespace that's been established
    	Import what we need directly without namespace manipulation
    
    13. Follow Java-to-Clojure naming conventions:
    	13.a. Inner classes are accessed with $ instead of . (e.g., Lifecycle$Event not Lifecycle.Event)
    	13.b. Static fields are accessed with / (e.g., View/VISIBLE)
    	13.c. For interfaces without concrete implementations, use proxy instead of reify
    	13.d. For event listeners and callbacks, consider using separate handler functions
    
    14. The code will run within a single Android Activity. Implement the Android application lifecycle callbacks using the AndroidX LifecycleObserver:
    	- Import androidx.lifecycle.LifecycleEventObserver
    	- Use (proxy [LifecycleEventObserver] [] (onStateChanged [source event] ...))
    	- Get lifecycle with (.. *context* (getLifecycle))
    	- Register with (.addObserver lifecycle observer)
    	- Handle events by examining event.name ("ON_CREATE", "ON_START", etc.)
    	- Prefer using LifecycleEventObserver interface over annotation-based approaches
    	- Use proxy for implementing interfaces with concrete methods (like LifecycleEventObserver)
    	- Be aware that Java annotations (@OnLifecycleEvent) don't translate directly to Clojure
    	- Remember to include all necessary inner classes in imports (e.g., Lifecycle$Event, Lifecycle$State)
    
    15. Lifecycle debugging tips:
        18.a. Add specific debugging for lifecycle registration issues
        18.b. Log the current lifecycle state before attempting to observe changes
        18.c. Check logcat for specific exception messages related to interface implementation
        18.d. Wrap lifecycle registration in try/catch to prevent app crashes
    
    16. Pay attention to contrast.  Use black text on bright backgrond.
    
    17. Add debug logging to help troubleshoot issues:
    	16.a. Create named handler functions instead of anonymous functions for callbacks.
    	16.b. Log the entry to each lifecycle callback with the parameters received.
    	16.c. Include a utility function for debug logging.
    
    18. VERY IMPORTANT: When providing the final code, enclose it with as follows:
    ```clojure
    	... code ...
    ```
    	EXTREMELY IMPORTANT: NEVER INCLUDE OTHER CODE snippets enclosed with ```clojure and ```, ONLY the final answer.
    
    19. Show your reasoning steps AND final result in a single response.
    
    
    Always respond with Clojure code in a markdown code block.

---------------------------------------------------------------

ðŸ‘¤ USER:
    Implement the following app:
    Keep the structure and behavior of the app as is but make the balls react to the tilt of the screen, using the accelerometer API.  Balls should accelerate faster the  bigger the tilt.
    
    Use the following code as a starting point. Improve and expand upon it to meet all requirements:
    ```clojure
    ;; Ten bouncing balls that alternate red/green, expand/shrink, and bounce off each other and the walls.
    
    (import '[android.content Context]
            '[android.graphics Canvas Paint Paint$Style Color]
            '[android.view View]
            '[android.widget LinearLayout]
            '[android.os Handler Looper]
            '[android.util Log]
            '[androidx.lifecycle LifecycleEventObserver]
            '[androidx.lifecycle Lifecycle$Event Lifecycle$State])
    
    (def TAG "ClojureApp")
    
    (defn debug-log [msg]
      (Log/d TAG (str msg)))
    
    (defn interpolate-color [color1 color2 factor]
      "Interpolate between two colors based on factor (0.0 to 1.0)"
      (let [r1 (bit-and (bit-shift-right color1 16) 0xFF)
            g1 (bit-and (bit-shift-right color1 8) 0xFF)
            b1 (bit-and color1 0xFF)
            r2 (bit-and (bit-shift-right color2 16) 0xFF)
            g2 (bit-and (bit-shift-right color2 8) 0xFF)
            b2 (bit-and color2 0xFF)
            r (int (+ r1 (* factor (- r2 r1))))
            g (int (+ g1 (* factor (- g2 g1))))
            b (int (+ b1 (* factor (- b2 b1))))]
        (Color/rgb r g b)))
    
    (defn distance [x1 y1 x2 y2]
      "Calculate distance between two points"
      (Math/sqrt (+ (* (- x2 x1) (- x2 x1)) (* (- y2 y1) (- y2 y1)))))
    
    (defn handle-ball-collision [ball1 ball2]
      "Handle collision between two balls using conservation of momentum"
      (let [dx (- (:x @ball2) (:x @ball1))
            dy (- (:y @ball2) (:y @ball1))
            dist (distance (:x @ball1) (:y @ball1) (:x @ball2) (:y @ball2))
            min-dist (+ (:radius @ball1) (:radius @ball2))]
        (when (< dist min-dist)
          (let [nx (if (zero? dist) 1.0 (/ dx dist))
                ny (if (zero? dist) 0.0 (/ dy dist))
                dvx (- (:vx @ball2) (:vx @ball1))
                dvy (- (:vy @ball2) (:vy @ball1))
                dvn (+ (* dvx nx) (* dvy ny))]
            (when (< dvn 0)
              (let [impulse dvn
                    new-vx1 (+ (:vx @ball1) (* impulse nx))
                    new-vy1 (+ (:vy @ball1) (* impulse ny))
                    new-vx2 (- (:vx @ball2) (* impulse nx))
                    new-vy2 (- (:vy @ball2) (* impulse ny))
                    overlap (- min-dist dist)
                    separation (/ overlap 2)
                    sep-x (* separation nx)
                    sep-y (* separation ny)]
                (swap! ball1 assoc
                       :vx new-vx1 :vy new-vy1
                       :x (- (:x @ball1) sep-x)
                       :y (- (:y @ball1) sep-y))
                (swap! ball2 assoc
                       :vx new-vx2 :vy new-vy2
                       :x (+ (:x @ball2) sep-x)
                       :y (+ (:y @ball2) sep-y))))))))
    
    (defn update-ball-position [ball width height]
      "Update ball position and handle wall bouncing"
      (let [radius (:radius @ball)
            new-x (+ (:x @ball) (:vx @ball))
            new-y (+ (:y @ball) (:vy @ball))]
        (let [bounce-x (or (<= new-x radius) (>= new-x (- width radius)))
              bounce-y (or (<= new-y radius) (>= new-y (- height radius)))
              final-vx (if bounce-x (- (:vx @ball)) (:vx @ball))
              final-vy (if bounce-y (- (:vy @ball)) (:vy @ball))
              final-x (max radius (min (- width radius) new-x))
              final-y (max radius (min (- height radius) new-y))]
          (swap! ball assoc
                 :x final-x :y final-y
                 :vx final-vx :vy final-vy))))
    
    (defn random-between [a b]
      (+ a (* (Math/random) (- b a))))
    
    (defn generate-initial-balls [width height]
      "Generate ten balls with initial positions and velocities, spaced apart"
      (let [center-x (/ width 2.0)
            center-y (/ height 2.0)
            angle-step (/ (* 2 Math/PI) 10)
            base-radius (min (/ width 12.0) (/ height 12.0))
            min-speed 2.5
            max-speed 4.5]
        (vec
         (for [i (range 10)]
           (let [angle (* i angle-step)
                 phase-offset (* i (/ Math/PI 5.0))
                 speed (random-between min-speed max-speed)
                 vx (* speed (Math/cos angle))
                 vy (* speed (Math/sin angle))
                 ;; Place balls in a decagon formation
                 pos-radius (min (/ width 3.0) (/ height 3.0))
                 x (+ center-x (* pos-radius (Math/cos angle)))
                 y (+ center-y (* pos-radius (Math/sin angle)))]
             (atom {:x x :y y :vx vx :vy vy
                    :phase-offset phase-offset :radius base-radius}))))))
    
    (defn handle-all-collisions [balls]
      "Handle collisions between all unique pairs of balls"
      (doseq [i (range (count balls))
              j (range (inc i) (count balls))]
        (handle-ball-collision (balls i) (balls j))))
    
    (defn create-ten-balls-view [context]
      (let [paint (Paint.)
            handler (Handler. (Looper/getMainLooper))
            start-time (atom (System/currentTimeMillis))
            view-ref (atom nil)
            animation-runnable (atom nil)
            balls-ref (atom nil)]
        ;; Configure paint
        (.setStyle paint Paint$Style/FILL)
        (.setAntiAlias paint true)
        (debug-log "Creating ten bouncing balls view")
        (let [view (proxy [View] [context]
                     (onDraw [canvas]
                       (let [width (.getWidth this)
                             height (.getHeight this)
                             current-time (System/currentTimeMillis)
                             elapsed-time (- current-time @start-time)
                             time-factor (/ elapsed-time 3000.0)]
                         (when (and (> width 0) (> height 0))
                           (when (nil? @balls-ref)
                             ;; Initialize balls only once when we know the width/height
                             (reset! balls-ref (generate-initial-balls width height)))
                           ;; Fill background white for high contrast
                           (.drawColor canvas Color/WHITE)
                           ;; Update and draw balls
                           (doseq [ball @balls-ref]
                             (update-ball-position ball width height))
                           (handle-all-collisions @balls-ref)
                           (doseq [idx (range (count @balls-ref))]
                             (let [ball (@balls-ref idx)
                                   ball-data @ball
                                   ;; Size animation
                                   max-radius (/ (min width height) 12.0)
                                   min-radius (/ max-radius 2.5)
                                   size-sine (Math/sin (+ (* time-factor 2 Math/PI) (:phase-offset ball-data)))
                                   radius (+ min-radius (* (+ size-sine 1) (/ (- max-radius min-radius) 2)))
                                   ;; Color alternation
                                   color-sine (Math/cos (+ (* time-factor 2 Math/PI) (:phase-offset ball-data)))
                                   color-factor (/ (+ color-sine 1) 2)
                                   current-color (interpolate-color Color/RED Color/GREEN color-factor)]
                               (swap! ball assoc :radius radius)
                               (.setColor paint current-color)
                               (.drawCircle canvas (:x ball-data) (:y ball-data) radius paint)))
                           (debug-log (str "Frame drawn at time " elapsed-time " ms")))))
                     (onSizeChanged [w h oldw oldh]
                       (debug-log (str "View size changed: " w "x" h))
                       (when (and (> w 0) (> h 0))
                         ;; Re-initialize balls with new size
                         (reset! balls-ref (generate-initial-balls w h)))
                       (proxy-super onSizeChanged w h oldw oldh))
                     (onAttachedToWindow []
                       (debug-log "View attached to window - starting ten balls animation")
                       (proxy-super onAttachedToWindow)
                       (reset! start-time (System/currentTimeMillis))
                       (letfn [(animate-fn []
                                 (when @view-ref
                                   (.invalidate @view-ref))
                                 (.postDelayed handler @animation-runnable 16))]
                         (reset! animation-runnable animate-fn)
                         (animate-fn)))
                     (onDetachedFromWindow []
                       (debug-log "View detached from window - stopping animation")
                       (.removeCallbacksAndMessages handler nil)
                       (proxy-super onDetachedFromWindow)))]
          (reset! view-ref view)
          (debug-log "Ten balls view created")
          view)))
    
    (defn lifecycle-handler [source event]
      (debug-log (str "Lifecycle event: " (.name event)))
      (case (.name event)
        "ON_CREATE" (debug-log "Activity created")
        "ON_START" (debug-log "Activity started")
        "ON_RESUME" (debug-log "Activity resumed")
        "ON_PAUSE" (debug-log "Activity paused")
        "ON_STOP" (debug-log "Activity stopped")
        "ON_DESTROY" (debug-log "Activity destroyed")
        (debug-log (str "Unhandled lifecycle event: " (.name event)))))
    
    (defn setup-lifecycle-observer []
      (let [lifecycle-observer
            (proxy [LifecycleEventObserver] []
              (onStateChanged [source event]
                (lifecycle-handler source event)))]
        (try
          (let [lifecycle (.. *context* (getLifecycle))]
            (debug-log (str "Current lifecycle state: " (.. lifecycle (getCurrentState) (name))))
            (.addObserver lifecycle lifecycle-observer)
            (debug-log "Lifecycle observer registered successfully"))
          (catch Exception e
            (debug-log (str "Error registering lifecycle observer: " (.getMessage e)))))))
    
    (defn -main []
      (debug-log "Starting ten bouncing balls app")
      (try
        (setup-lifecycle-observer)
        (let [balls-view (create-ten-balls-view *context*)]
          (let [layout-params (android.widget.LinearLayout$LayoutParams.
                               android.widget.LinearLayout$LayoutParams/MATCH_PARENT
                               android.widget.LinearLayout$LayoutParams/MATCH_PARENT)]
            (.setLayoutParams balls-view layout-params))
          (.addView *content-layout* balls-view)
          (debug-log "Ten bouncing balls app setup complete"))
        (catch Exception e
          (debug-log (str "Error in main: " (.getMessage e)))
          (.printStackTrace e))))
    ```

---------------------------------------------------------------

ðŸ§  ASSISTANT:
    Let's reason step by step, then present the final code.
    
    ---
    
    ## Reasoning Steps
    
    ### Goal
    - Make the balls react to the tilt of the device using the accelerometer API.
    - Balls should accelerate faster the bigger the tilt.
    - Preserve all current behaviors and structure.
    
    ### Plan
    
    1. **SensorManager/Accelerometer**
       - Import SensorManager, Sensor, SensorEventListener, SensorEvent.
       - Register a SensorEventListener for the accelerometer in ON_RESUME.
       - Unregister in ON_PAUSE.
    
    2. **State for Tilt**
       - Store the most recent tilt values (x, y) in an atom, e.g. `tilt-ref`.
       - Map sensor values to the coordinate system of the app (`x` and `y` axes may need to be swapped/inverted).
    
    3. **Physics: Apply Tilt**
       - In `onDraw`, for each ball, add a tilt-derived acceleration to velocity before updating position.
       - Acceleration proportional to tilt.
    
    4. **Debug Logging**
       - Log registration/unregistration of sensor listener, and each event received.
       - Log tilt values.
    
    5. **Lifecycle**
       - Ensure sensor listener follows lifecycle events (register on resume, unregister on pause).
    
    6. **Contrast**
       - Already uses white background and colored balls.
    
    7. **Imports**
       - Add sensor-related imports.
    
    ### Key APIs
    
    - `android.hardware.SensorManager`
    - `android.hardware.Sensor`
    - `android.hardware.SensorEventListener`
    - `android.hardware.SensorEvent`
    
    ### Coordinate System
    
    - **Sensor axes:** On most phones, when held in portrait, accelerometer X is left-right, Y is up-down, Z is toward the user.
    - We'll map:
      - Negative X tilt (left is down): balls accelerate left
      - Positive X tilt (right is down): balls accelerate right
      - Negative Y tilt (top is down): balls accelerate up
      - Positive Y tilt (bottom is down): balls accelerate down
    
    - For a natural feel, acceleration = -sensor value (as gravity is positive downward), but can be tuned.
    
    ### Implementation Details
    
    - Use an atom `tilt-ref` holding `{:ax 0.0 :ay 0.0}`.
    - In `onDraw`, for each ball:
      - Add `tilt-accel-factor * ax` to vx, and `tilt-accel-factor * ay` to vy.
      - Use e.g. `tilt-accel-factor = 0.5` (tune for feel).
    
    - Sensor listener is registered/unregistered via a pair of functions.
    - Store sensor manager and listener in atoms for cleanup.
    
    ---
    
    ## Now, the code
    
    **Key additions:**
    - Imports for sensor classes.
    - Atoms: `tilt-ref`, `sensor-manager-ref`, `sensor-listener-ref`.
    - Functions: `register-tilt-listener!`, `unregister-tilt-listener!`.
    - Lifecycle event handling for sensors.
    - Physics change: in `onDraw`, update ball velocity by tilt.
    
    ---
    
    ```clojure
    ;; Ten bouncing balls that bounce and expand/shrink, now reacting to device tilt using the accelerometer.
    
    (import '[android.content Context]
            '[android.graphics Canvas Paint Paint$Style Color]
            '[android.view View]
            '[android.widget LinearLayout]
            '[android.os Handler Looper]
            '[android.util Log]
            '[androidx.lifecycle LifecycleEventObserver]
            '[androidx.lifecycle Lifecycle$Event Lifecycle$State]
            '[android.hardware SensorManager Sensor SensorEventListener SensorEvent])
    
    (def TAG "ClojureApp")
    
    (defn debug-log [msg]
      (Log/d TAG (str msg)))
    
    (defn interpolate-color [color1 color2 factor]
      "Interpolate between two colors based on factor (0.0 to 1.0)"
      (let [r1 (bit-and (bit-shift-right color1 16) 0xFF)
            g1 (bit-and (bit-shift-right color1 8) 0xFF)
            b1 (bit-and color1 0xFF)
            r2 (bit-and (bit-shift-right color2 16) 0xFF)
            g2 (bit-and (bit-shift-right color2 8) 0xFF)
            b2 (bit-and color2 0xFF)
            r (int (+ r1 (* factor (- r2 r1))))
            g (int (+ g1 (* factor (- g2 g1))))
            b (int (+ b1 (* factor (- b2 b1))))]
        (Color/rgb r g b)))
    
    (defn distance [x1 y1 x2 y2]
      "Calculate distance between two points"
      (Math/sqrt (+ (* (- x2 x1) (- x2 x1)) (* (- y2 y1) (- y2 y1)))))
    
    (defn handle-ball-collision [ball1 ball2]
      "Handle collision between two balls using conservation of momentum"
      (let [dx (- (:x @ball2) (:x @ball1))
            dy (- (:y @ball2) (:y @ball1))
            dist (distance (:x @ball1) (:y @ball1) (:x @ball2) (:y @ball2))
            min-dist (+ (:radius @ball1) (:radius @ball2))]
        (when (< dist min-dist)
          (let [nx (if (zero? dist) 1.0 (/ dx dist))
                ny (if (zero? dist) 0.0 (/ dy dist))
                dvx (- (:vx @ball2) (:vx @ball1))
                dvy (- (:vy @ball2) (:vy @ball1))
                dvn (+ (* dvx nx) (* dvy ny))]
            (when (< dvn 0)
              (let [impulse dvn
                    new-vx1 (+ (:vx @ball1) (* impulse nx))
                    new-vy1 (+ (:vy @ball1) (* impulse ny))
                    new-vx2 (- (:vx @ball2) (* impulse nx))
                    new-vy2 (- (:vy @ball2) (* impulse ny))
                    overlap (- min-dist dist)
                    separation (/ overlap 2)
                    sep-x (* separation nx)
                    sep-y (* separation ny)]
                (swap! ball1 assoc
                       :vx new-vx1 :vy new-vy1
                       :x (- (:x @ball1) sep-x)
                       :y (- (:y @ball1) sep-y))
                (swap! ball2 assoc
                       :vx new-vx2 :vy new-vy2
                       :x (+ (:x @ball2) sep-x)
                       :y (+ (:y @ball2) sep-y))))))))
    
    (defn update-ball-position [ball width height]
      "Update ball position and handle wall bouncing"
      (let [radius (:radius @ball)
            new-x (+ (:x @ball) (:vx @ball))
            new-y (+ (:y @ball) (:vy @ball))]
        (let [bounce-x (or (<= new-x radius) (>= new-x (- width radius)))
              bounce-y (or (<= new-y radius) (>= new-y (- height radius)))
              final-vx (if bounce-x (- (:vx @ball)) (:vx @ball))
              final-vy (if bounce-y (- (:vy @ball)) (:vy @ball))
              final-x (max radius (min (- width radius) new-x))
              final-y (max radius (min (- height radius) new-y))]
          (swap! ball assoc
                 :x final-x :y final-y
                 :vx final-vx :vy final-vy))))
    
    (defn random-between [a b]
      (+ a (* (Math/random) (- b a))))
    
    (defn generate-initial-balls [width height]
      "Generate ten balls with initial positions and velocities, spaced apart"
      (let [center-x (/ width 2.0)
            center-y (/ height 2.0)
            angle-step (/ (* 2 Math/PI) 10)
            base-radius (min (/ width 12.0) (/ height 12.0))
            min-speed 2.5
            max-speed 4.5]
        (vec
         (for [i (range 10)]
           (let [angle (* i angle-step)
                 phase-offset (* i (/ Math/PI 5.0))
                 speed (random-between min-speed max-speed)
                 vx (* speed (Math/cos angle))
                 vy (* speed (Math/sin angle))
                 ;; Place balls in a decagon formation
                 pos-radius (min (/ width 3.0) (/ height 3.0))
                 x (+ center-x (* pos-radius (Math/cos angle)))
                 y (+ center-y (* pos-radius (Math/sin angle)))]
             (atom {:x x :y y :vx vx :vy vy
                    :phase-offset phase-offset :radius base-radius}))))))
    
    (defn handle-all-collisions [balls]
      "Handle collisions between all unique pairs of balls"
      (doseq [i (range (count balls))
              j (range (inc i) (count balls))]
        (handle-ball-collision (balls i) (balls j))))
    
    ;; ---- TILT SENSOR STATE ----
    
    (def tilt-ref (atom {:ax 0.0 :ay 0.0}))
    (def sensor-manager-ref (atom nil))
    (def sensor-listener-ref (atom nil))
    
    (defn handle-tilt-sensor-event [event]
      ;; event.values[0] = x-axis (left/right tilt), event.values[1] = y-axis (up/down tilt)
      (let [values (.values event)
            ;; On most devices, x is left/right, y is up/down in portrait.
            raw-ax (aget values 0)
            raw-ay (aget values 1)
            ;; For a natural mapping, invert axes if needed. Tune if behavior is off.
            ax (- raw-ax)
            ay raw-ay]
        (reset! tilt-ref {:ax ax :ay ay})
        (debug-log (str "Tilt sensor: ax=" (float ax) " ay=" (float ay)))))
    
    (defn register-tilt-listener! [context]
      (debug-log "Registering tilt sensor listener")
      (try
        (let [sensor-manager (.getSystemService context Context/SENSOR_SERVICE)
              sensor-manager (cast SensorManager sensor-manager)
              accelerometer (.getDefaultSensor sensor-manager Sensor/TYPE_ACCELEROMETER)
              listener
              (proxy [SensorEventListener] []
                (onSensorChanged [event]
                  (handle-tilt-sensor-event event))
                (onAccuracyChanged [sensor accuracy]
                  ;; No-op
                  ))]
          (reset! sensor-manager-ref sensor-manager)
          (reset! sensor-listener-ref listener)
          (if accelerometer
            (do
              (.registerListener sensor-manager listener accelerometer SensorManager/SENSOR_DELAY_GAME)
              (debug-log "Tilt sensor listener registered"))
            (debug-log "No accelerometer sensor found")))
        (catch Exception e
          (debug-log (str "Error registering tilt sensor listener: " (.getMessage e))))))
    
    (defn unregister-tilt-listener! []
      (debug-log "Unregistering tilt sensor listener")
      (when (and @sensor-manager-ref @sensor-listener-ref)
        (try
          (.unregisterListener @sensor-manager-ref @sensor-listener-ref)
          (debug-log "Tilt sensor listener unregistered")
          (catch Exception e
            (debug-log (str "Error unregistering tilt sensor listener: " (.getMessage e)))))
        (reset! sensor-manager-ref nil)
        (reset! sensor-listener-ref nil)))
    
    ;; ---- TEN BALLS VIEW ----
    
    (defn create-ten-balls-view [context]
      (let [paint (Paint.)
            handler (Handler. (Looper/getMainLooper))
            start-time (atom (System/currentTimeMillis))
            view-ref (atom nil)
            animation-runnable (atom nil)
            balls-ref (atom nil)]
        ;; Configure paint
        (.setStyle paint Paint$Style/FILL)
        (.setAntiAlias paint true)
        (debug-log "Creating ten bouncing balls view")
        (let [view (proxy [View] [context]
                     (onDraw [canvas]
                       (let [width (.getWidth this)
                             height (.getHeight this)
                             current-time (System/currentTimeMillis)
                             elapsed-time (- current-time @start-time)
                             time-factor (/ elapsed-time 3000.0)
                             {:keys [ax ay]} @tilt-ref
                             tilt-accel-factor 0.5]  ;; adjust for feel
                         (when (and (> width 0) (> height 0))
                           (when (nil? @balls-ref)
                             ;; Initialize balls only once when we know the width/height
                             (reset! balls-ref (generate-initial-balls width height)))
                           ;; Fill background white for high contrast
                           (.drawColor canvas Color/WHITE)
                           ;; Update and draw balls
                           (doseq [ball @balls-ref]
                             ;; Apply tilt acceleration to velocity
                             (swap! ball update :vx #(+ % (* tilt-accel-factor ax)))
                             (swap! ball update :vy #(+ % (* tilt-accel-factor ay)))
                             ;; Optionally limit max velocity for stability
                             (swap! ball (fn [b]
                                           (let [max-v 12.0
                                                 vx (max (- max-v) (min max-v (:vx b)))
                                                 vy (max (- max-v) (min max-v (:vy b)))]
                                             (assoc b :vx vx :vy vy))))
                             (update-ball-position ball width height))
                           (handle-all-collisions @balls-ref)
                           (doseq [idx (range (count @balls-ref))]
                             (let [ball (@balls-ref idx)
                                   ball-data @ball
                                   ;; Size animation
                                   max-radius (/ (min width height) 12.0)
                                   min-radius (/ max-radius 2.5)
                                   size-sine (Math/sin (+ (* time-factor 2 Math/PI) (:phase-offset ball-data)))
                                   radius (+ min-radius (* (+ size-sine 1) (/ (- max-radius min-radius) 2)))
                                   ;; Color alternation
                                   color-sine (Math/cos (+ (* time-factor 2 Math/PI) (:phase-offset ball-data)))
                                   color-factor (/ (+ color-sine 1) 2)
                                   current-color (interpolate-color Color/RED Color/GREEN color-factor)]
                               (swap! ball assoc :radius radius)
                               (.setColor paint current-color)
                               (.drawCircle canvas (:x ball-data) (:y ball-data) radius paint)))
                           (debug-log (str "Frame drawn at time " elapsed-time " ms, tilt ax=" (float ax) " ay=" (float ay))))))
    
                     (onSizeChanged [w h oldw oldh]
                       (debug-log (str "View size changed: " w "x" h))
                       (when (and (> w 0) (> h 0))
                         ;; Re-initialize balls with new size
                         (reset! balls-ref (generate-initial-balls w h)))
                       (proxy-super onSizeChanged w h oldw oldh))
                     (onAttachedToWindow []
                       (debug-log "View attached to window - starting ten balls animation")
                       (proxy-super onAttachedToWindow)
                       (reset! start-time (System/currentTimeMillis))
                       (letfn [(animate-fn []
                                 (when @view-ref
                                   (.invalidate @view-ref))
                                 (.postDelayed handler @animation-runnable 16))]
                         (reset! animation-runnable animate-fn)
                         (animate-fn)))
                     (onDetachedFromWindow []
                       (debug-log "View detached from window - stopping animation")
                       (.removeCallbacksAndMessages handler nil)
                       (proxy-super onDetachedFromWindow)))]
          (reset! view-ref view)
          (debug-log "Ten balls view created")
          view)))
    
    ;; ---- LIFECYCLE ----
    
    (defn lifecycle-handler [source event]
      (debug-log (str "Lifecycle event: " (.name event)))
      (case (.name event)
        "ON_CREATE" (debug-log "Activity created")
        "ON_START" (debug-log "Activity started")
        "ON_RESUME" (do
                      (debug-log "Activity resumed")
                      (register-tilt-listener! *context*))
        "ON_PAUSE" (do
                     (debug-log "Activity paused")
                     (unregister-tilt-listener!))
        "ON_STOP" (debug-log "Activity stopped")
        "ON_DESTROY" (do
                       (debug-log "Activity destroyed")
                       (unregister-tilt-listener!))
        (debug-log (str "Unhandled lifecycle event: " (.name event)))))
    
    (defn setup-lifecycle-observer []
      (let [lifecycle-observer
            (proxy [LifecycleEventObserver] []
              (onStateChanged [source event]
                (lifecycle-handler source event)))]
        (try
          (let [lifecycle (.. *context* (getLifecycle))]
            (debug-log (str "Current lifecycle state: " (.. lifecycle (getCurrentState) (name))))
            (.addObserver lifecycle lifecycle-observer)
            (debug-log "Lifecycle observer registered successfully"))
          (catch Exception e
            (debug-log (str "Error registering lifecycle observer: " (.getMessage e)))))))
    
    (defn -main []
      (debug-log "Starting ten bouncing balls app (tilt-reactive)")
      (try
        (setup-lifecycle-observer)
        (let [balls-view (create-ten-balls-view *context*)]
          (let [layout-params (android.widget.LinearLayout$LayoutParams.
                               android.widget.LinearLayout$LayoutParams/MATCH_PARENT
                               android.widget.LinearLayout$LayoutParams/MATCH_PARENT)]
            (.setLayoutParams balls-view layout-params))
          (.addView *content-layout* balls-view)
          (debug-log "Ten bouncing balls app setup complete"))
        (catch Exception e
          (debug-log (str "Error in main: " (.getMessage e)))
          (.printStackTrace e))))
    ```
    ---
    
    **Summary of changes**:  
    - The balls now react to device tilt: as you tilt the screen, the balls accelerate in that direction.
    - Accelerometer is managed with proper lifecycle handling.
    - Debug logging added for sensor and lifecycle events.
    - Imports and atoms for sensor handling added.
    - App structure, collision, and animation remain unchanged except for tilt acceleration.

---------------------------------------------------------------

